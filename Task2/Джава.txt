Реализовать приложение-пример в котором будет:

- Класс с сигнлтоном
- Класс Bean с полем-именем, содежащий массив байт, ArrayList, примитивы и ссылку на себя.
- Несколько экземпляров класса Bean, замкнутых в кольцо своими ссылками.
- Несколько потоков, бесконечно висящих в sleep.
- Каждый поток имеет свою ссылку на сигнлтон и создает свой экземпляр класса Bean.
- "Вредный" поток, который ломает все по OutOfMemory, бесконечно аллоцируя массивы
- Вредный поток запускать специальным параметром командной строки

Затем скомпилировать и запуская приложение из консоли сделать следующее:

######### PID ##########
>jcmd
3008 ru.nsu.kgurin.Main
2924 jdk.jcmd/sun.tools.jcmd.JCmd

ИЛИ

>jps
3008 Main
9024
13876 org.eclipse.equinox.launcher_1.6.600.v20231106-1826.jar
12648 Jps
########################

- прицепиться jmap-ом и сохранить дамп памяти
	jmap -dump:file=dumpfile.hprof <PID>
- рассказать, по каким признакам вы поймете, что какой-то файл является дампом памяти
	по заголовку (JAVA PROFILE 1.0) в начале дока; по расширению; по беспорядочной структуре файла;
	Дампы памяти обычно содержат информацию о текущем состоянии кучи Java (heap)
	В дампах памяти часто присутствует информация о стеках вызовов всех или некоторых потоков в момент снятия дампа.
	Дампы памяти могут содержать информацию о всех загруженных классах в JVM на момент снятия дампа, включая имена классов, метаданные и т. д.

- открыть дамп памяти с помощью Memory Analyzer Tool или IntelliJ Idea
- показать в дампе cколько ссылок, синглтон, потоки и их переменные


- прицепиться jstack-ом и сохранить дамп потоков
	jstack <PID> > threads_dump.txt
- рассказать, по каким признакам вы поймете, что какой-то файл является дампом потоков
	Файл содержит информацию о состоянии и стеках вызовов всех или некоторых потоков в момент времени, когда дамп был снят.
	Файл может быть структурирован таким образом, чтобы каждая запись содержала информацию о состоянии и стеке вызовов одного потока.
- показать в дампе потоков потоки приложения и в каком они были состоянии


- прицепиться jcmd и выполнить для примера пару его команд
	jcmd <PID> help			- получение списка доступных команд для конкретного Java-процесса
	jcmd -l				- получение списка доступных Java-процессов
- рассказать своими словами, для чего нужен jcmd и какие команды у него есть
	jcmd - это утилита командной строки для взаимодействия с Java-процессами. Она предоставляет различные команды для диагностики и управления JVM. 


- прицепиться jconsole и рассказать что где находится в интерфейсе
	jconsole <PID>


- запустить приложение с включенным "вредным" потоком и -XX:+HeapDumpOnOutOfMemoryError
- дождаться когда приложение сломается и сохранит дамп памяти
- при необходимости использовать -Xmx (если долго ждать или дамп большой, например)
- открыть дамп памяти и рассказать, по каким признакам вы поймете, кто сожрал всю память